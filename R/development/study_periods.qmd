---
editor: 
  markdown: 
    wrap: 72
---


# Libraries

```{r}
#| include: false
library(sf)
library(tmap)
library(tidyverse)
library(here)
library(knitr)
```



# Source Data

```{r}
#| include: false
#| warning: false

source(knitr::purl(here("R",'src', "boundary_registry_data.qmd")))
#property_boundaries
#forestry_registry
```

# 2000 - 2005

```{r}
#| include: false
#| warning: false

# Both active and inactive properties for subset of years
#anho_capa >= 2000 & <- This is not correct just yet because this will exclude 
# properties that are set estado = 0 = active which are properties that are 
#active throug the time period until 2023
subset <- property_boundary %>%
  filter(anho_capa  <= 2005) |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) 


# Divide subset into active and inactive in next two variables

# Create column for year property became inactive to be filled first by 2020 to
# indicate that is goes up to our study period. Not actually true just set for
# convenience t
#anho_capa >= 2000 & 
active <- property_boundary %>%
  filter(anho_capa  <= 2005 & estado == 0) |>
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) |> 
  mutate(year_inactive = 2020)


# From subset only properties that are inactive
inactive_properties <- subset %>%
  filter(estado  == 1)

# find the inactive properties from subset that interesect the larger dataset
inactive_active_intersect <- st_intersection(inactive_properties, property_boundary)  


#small test to undestand structure
# put_0003 <- inactive_active_intersect |> 
#   filter(put_id == 'PUT0003') |> 
#   select(put_id, anho_capa, put_id.1, anho_capa.1  ) |> 
#   st_drop_geometry()

# This deals with multiples from intersect, determines the year next property was
# created and uses it to determine the current  became inactive, does not return
# rows that are single without duplicate as those are inactive with no property split
# This is where to first start adjusting for study period
inactive_year <- inactive_active_intersect %>%
  group_by(put_id) %>%
  mutate(next_year = if_else(any(anho_capa.1 > anho_capa & !is.na(anho_capa.1)), 
                             min(anho_capa.1[anho_capa.1 > anho_capa & !is.na(anho_capa.1)]), 
                             max(anho_capa.1)), 
         .before = cat) %>%
  ungroup() %>%
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
  mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
  filter(year_inactive >= 2000 & year_inactive <= 2005) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()
  

# single rows, they have estado = 1 = inactive with no intersecting polygons
# so no replacement
inactive_singles <- inactive_active_intersect %>% 
  group_by(put_id) %>% 
  filter(n() == 1) %>% 
  mutate(year_inactive = anho_capa) %>% 
  ungroup() |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive)

# Combine three sets for the total inactive and active
# inactive singles gives up properties that are less than current study period
true_active_inactive <- bind_rows(inactive_year, inactive_singles,active) |> 
  filter(year_inactive  >= 2000) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# Filter forestry registry with true active_inactive giving us active properites 
study_properties_0005 <- forestry_registry |> 
  filter(put_id %in% true_active_inactive$put_id)

rm(subset, active, inactive_properties, inactive_active_intersect,
   inactive_year,inactive_singles, true_active_inactive)

#tmap_mode('view')
# 
# 
# 
# tm_shape(true_active_0005) +
#   tm_sf(col = 'red') +
# tm_shape(study_properties_0005) +
#   tm_sf(col = 'grupo') +
#   tm_shape() +
#   tm_sf(col = 'green')

```

# 2006-2011

```{r}
#| include: false
#| warning: false

# Both active and inactive properties for subset of years
#anho_capa >= 2000 & <- This is not correct just yet because this will exclude 
# properties that are set estado = 0 = active which are properties that are 
#active throug the time period until 2023
subset <- property_boundary %>%
  filter(anho_capa  <= 2011) |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) 


# Divide subset into active and inactive in next two variables

# Create column for year property became inactive to be filled first by 2020 to
# indicate that is goes up to our study period. Not actually true just set for
# convenience t
#anho_capa >= 2000 & 
active <- property_boundary %>%
  filter(anho_capa  <= 2011 & estado == 0) |>
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) |> 
  mutate(year_inactive = 2020)


# From subset only properties that are inactive
inactive_properties <- subset %>%
  filter(estado  == 1)

# find the inactive properties from subset that interesect the larger dataset
inactive_active_intersect <- st_intersection(inactive_properties, property_boundary)  

#small test to undestand structure
# put_0003 <- inactive_active_intersect |> 
#   filter(put_id == 'PUT0003') |> 
#   select(put_id, anho_capa, put_id.1, anho_capa.1  ) |> 
#   st_drop_geometry()

# This deals with multiples from intersect, determines the year next property was
# created and uses it to determine the current  became inactive, does not return
# rows that are single without duplicate as those are inactive with no property split
# This is where to first start adjusting for study period
inactive_year <- inactive_active_intersect %>%
  group_by(put_id) %>%
  mutate(next_year = if_else(any(anho_capa.1 > anho_capa & !is.na(anho_capa.1)), 
                             min(anho_capa.1[anho_capa.1 > anho_capa & !is.na(anho_capa.1)]), 
                             max(anho_capa.1)), 
         .before = cat) %>%
  ungroup() %>%
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
  mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
  filter(year_inactive >= 2006 & year_inactive <= 2011) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# single rows, they have estado = 1 = inactive with no intersecting polygons
# so no replacement
inactive_singles <- inactive_active_intersect %>% 
  group_by(put_id) %>% 
  filter(n() == 1) %>% 
  mutate(year_inactive = anho_capa) %>% 
  ungroup() |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive)

# Combine three sets for the total inactive and active
# inactive singles gives up properties that are less than current study period
true_active_inactive <- 
  bind_rows(inactive_year, inactive_singles, active) |> 
  filter(year_inactive  >= 2006) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# Filter forestry registry with true active_inactive giving us active properites 
study_properties_0611 <- forestry_registry |> 
  filter(put_id %in% true_active_inactive$put_id)

rm(subset, active, inactive_properties, inactive_active_intersect,
   inactive_year,inactive_singles, true_active_inactive)
```


# 2011 - 2013

```{r}
#| include: false
#| warning: false

# Both active and inactive properties for subset of years
#anho_capa >= 2000 & <- This is not correct just yet because this will exclude 
# properties that are set estado = 0 = active which are properties that are 
#active through the time period until 2023

subset <- property_boundary %>%
  filter(anho_capa  <= 2013) |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) 


# Divide subset into active and inactive in next two variables

# Create column for year property became inactive to be filled first by 2020 to
# indicate that is goes up to our study period. Not actually true just set for
# convenience t
#anho_capa >= 2000 & 
active <- property_boundary %>%
  filter(anho_capa  <= 2013 & estado == 0) |>
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) |> 
  mutate(year_inactive = 2020)


# From subset only properties that are inactive
inactive_properties <- subset %>%
  filter(estado  == 1)

# find the inactive properties from subset that interesect the larger dataset
inactive_active_intersect <- st_intersection(inactive_properties, property_boundary)  





inactive_year <- inactive_active_intersect %>%
  group_by(put_id) %>%
  mutate(next_year = if_else(any(anho_capa.1 > anho_capa & !is.na(anho_capa.1)), 
                             min(anho_capa.1[anho_capa.1 > anho_capa & !is.na(anho_capa.1)]), 
                             max(anho_capa.1)), 
         .before = cat) %>%
  ungroup() %>%
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
  mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
  filter(year_inactive >= 2011 & year_inactive <= 2013) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()



# single rows, they have estado = 1 = inactive with no intersecting polygons
# so no replacement
inactive_singles <- inactive_active_intersect %>% 
  group_by(put_id) %>% 
  filter(n() == 1) %>% 
  mutate(year_inactive = anho_capa) %>% 
  ungroup() |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive)

# Combine three sets for the total inactive and active
# inactive singles gives up properties that are less than current study period
true_active_inactive <- 
  bind_rows(inactive_year, inactive_singles, active) |> 
  filter(year_inactive  >= 2011) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# Filter forestry registry with true active_inactive giving us active properites 
study_properties_1113 <- forestry_registry |> 
  filter(put_id %in% true_active_inactive$put_id)

rm(subset, active, inactive_properties, inactive_active_intersect,
   inactive_year,inactive_singles, true_active_inactive)
```


# 2013 - 2015

```{r}
#| include: false
#| warning: false

# Both active and inactive properties for subset of years
#anho_capa >= 2000 & <- This is not correct just yet because this will exclude 
# properties that are set estado = 0 = active which are properties that are 
#active throug the time period until 2023
subset <- property_boundary %>%
  filter(anho_capa  <= 2015) |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) 


# Divide subset into active and inactive in next two variables

# Create column for year property became inactive to be filled first by 2020 to
# indicate that is goes up to our study period. Not actually true just set for
# convenience t
#anho_capa >= 2000 & 
active <- property_boundary %>%
  filter(anho_capa  <= 2011 & estado == 0) |>
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) |> 
  mutate(year_inactive = 2020)


# From subset only properties that are inactive
inactive_properties <- subset %>%
  filter(estado  == 1)

# find the inactive properties from subset that interesect the larger dataset
inactive_active_intersect <- st_intersection(inactive_properties, property_boundary)  



# This deals with multiples from intersect, determines the year next property was
# created and uses it to determine the current  became inactive, does not return
# rows that are single without duplicate as those are inactive with no property split
# This is where to first start adjusting for study period
inactive_year <- inactive_active_intersect %>%
  group_by(put_id) %>%
  mutate(next_year = if_else(any(anho_capa.1 > anho_capa & !is.na(anho_capa.1)), 
                             min(anho_capa.1[anho_capa.1 > anho_capa & !is.na(anho_capa.1)]), 
                             max(anho_capa.1)), 
         .before = cat) %>%
  ungroup() %>%
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
  mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
  filter(year_inactive >= 2013 & year_inactive <= 2015) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# single rows, they have estado = 1 = inactive with no intersecting polygons
# so no replacement
inactive_singles <- inactive_active_intersect %>% 
  group_by(put_id) %>% 
  filter(n() == 1) %>% 
  mutate(year_inactive = anho_capa) %>% 
  ungroup() |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive)

# Combine three sets for the total inactive and active
# inactive singles gives up properties that are less than current study period
true_active_inactive <- 
  bind_rows(inactive_year, inactive_singles, active) |> 
  filter(year_inactive  >= 2013) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# Filter forestry registry with true active_inactive giving us active properites 
study_properties_1315 <- forestry_registry |> 
  filter(put_id %in% true_active_inactive$put_id)

rm(subset, active, inactive_properties, inactive_active_intersect,
   inactive_year,inactive_singles, true_active_inactive)
```

# 2015 - 2016


```{r}
#| include: false
#| warning: false

# Both active and inactive properties for subset of years
#anho_capa >= 2000 & <- This is not correct just yet because this will exclude 
# properties that are set estado = 0 = active which are properties that are 
#active throug the time period until 2023
subset <- property_boundary %>%
  filter(anho_capa  <= 2016) |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) 


# Divide subset into active and inactive in next two variables

# Create column for year property became inactive to be filled first by 2020 to
# indicate that is goes up to our study period. Not actually true just set for
# convenience t
#anho_capa >= 2000 & 
active <- property_boundary %>%
  filter(anho_capa  <= 2016 & estado == 0) |>
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) |> 
  mutate(year_inactive = 2020)


# From subset only properties that are inactive
inactive_properties <- subset %>%
  filter(estado  == 1)

# find the inactive properties from subset that interesect the larger dataset
inactive_active_intersect <- st_intersection(inactive_properties, property_boundary)  



# This deals with multiples from intersect, determines the year next property was
# created and uses it to determine the current  became inactive, does not return
# rows that are single without duplicate as those are inactive with no property split
# This is where to first start adjusting for study period
inactive_year <- inactive_active_intersect %>%
  group_by(put_id) %>%
  mutate(next_year = if_else(any(anho_capa.1 > anho_capa & !is.na(anho_capa.1)), 
                             min(anho_capa.1[anho_capa.1 > anho_capa & !is.na(anho_capa.1)]), 
                             max(anho_capa.1)), 
         .before = cat) %>%
  ungroup() %>%
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
  mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
  filter(year_inactive >= 2015 & year_inactive <= 2016) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# single rows, they have estado = 1 = inactive with no intersecting polygons
# so no replacement
inactive_singles <- inactive_active_intersect %>% 
  group_by(put_id) %>% 
  filter(n() == 1) %>% 
  mutate(year_inactive = anho_capa) %>% 
  ungroup() |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive)

# Combine three sets for the total inactive and active
# inactive singles gives up properties that are less than current study period
true_active_inactive <- 
  bind_rows(inactive_year, inactive_singles, active) |> 
  filter(year_inactive  >= 2015) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# Filter forestry registry with true active_inactive giving us active properites 
study_properties_1516 <- forestry_registry |> 
  filter(put_id %in% true_active_inactive$put_id)

rm(subset, active, inactive_properties, inactive_active_intersect,
   inactive_year,inactive_singles, true_active_inactive)
```


# 2016 - 2017

```{r}
#| include: false
#| warning: false

# Both active and inactive properties for subset of years
#anho_capa >= 2000 & <- This is not correct just yet because this will exclude 
# properties that are set estado = 0 = active which are properties that are 
#active throug the time period until 2023
subset <- property_boundary %>%
  filter(anho_capa  <= 2017) |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) 


# Divide subset into active and inactive in next two variables

# Create column for year property became inactive to be filled first by 2020 to
# indicate that is goes up to our study period. Not actually true just set for
# convenience t
#anho_capa >= 2000 & 
active <- property_boundary %>%
  filter(anho_capa  <= 2017 & estado == 0) |>
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) |> 
  mutate(year_inactive = 2020)


# From subset only properties that are inactive
inactive_properties <- subset %>%
  filter(estado  == 1)

# find the inactive properties from subset that interesect the larger dataset
inactive_active_intersect <- st_intersection(inactive_properties, property_boundary)  



# This deals with multiples from intersect, determines the year next property was
# created and uses it to determine the current  became inactive, does not return
# rows that are single without duplicate as those are inactive with no property split
# This is where to first start adjusting for study period
inactive_year <- inactive_active_intersect %>%
  group_by(put_id) %>%
  mutate(next_year = if_else(any(anho_capa.1 > anho_capa & !is.na(anho_capa.1)), 
                             min(anho_capa.1[anho_capa.1 > anho_capa & !is.na(anho_capa.1)]), 
                             max(anho_capa.1)), 
         .before = cat) %>%
  ungroup() %>%
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
  mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
  filter(year_inactive >= 2016 & year_inactive <= 2017) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# single rows, they have estado = 1 = inactive with no intersecting polygons
# so no replacement
inactive_singles <- inactive_active_intersect %>% 
  group_by(put_id) %>% 
  filter(n() == 1) %>% 
  mutate(year_inactive = anho_capa) %>% 
  ungroup() |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive)

# Combine three sets for the total inactive and active
# inactive singles gives up properties that are less than current study period
true_active_inactive <- 
  bind_rows(inactive_year, inactive_singles, active) |> 
  filter(year_inactive  >= 2016) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# Filter forestry registry with true active_inactive giving us active properites 
study_properties_1617 <- forestry_registry |> 
  filter(put_id %in% true_active_inactive$put_id)

rm(subset, active, inactive_properties, inactive_active_intersect,
   inactive_year,inactive_singles, true_active_inactive)
```

# 2017 -2018

```{r}
#| include: false
#| warning: false

# Both active and inactive properties for subset of years
#anho_capa >= 2000 & <- This is not correct just yet because this will exclude 
# properties that are set estado = 0 = active which are properties that are 
#active throug the time period until 2023
subset <- property_boundary %>%
  filter(anho_capa  <= 2018) |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) 


# Divide subset into active and inactive in next two variables

# Create column for year property became inactive to be filled first by 2020 to
# indicate that is goes up to our study period. Not actually true just set for
# convenience t
#anho_capa >= 2000 & 
active <- property_boundary %>%
  filter(anho_capa  <= 2018 & estado == 0) |>
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) |> 
  mutate(year_inactive = 2020)


# From subset only properties that are inactive
inactive_properties <- subset %>%
  filter(estado  == 1)

# find the inactive properties from subset that interesect the larger dataset
inactive_active_intersect <- st_intersection(inactive_properties, property_boundary)  



# This deals with multiples from intersect, determines the year next property was
# created and uses it to determine the current  became inactive, does not return
# rows that are single without duplicate as those are inactive with no property split
# This is where to first start adjusting for study period
inactive_year <- inactive_active_intersect %>%
  group_by(put_id) %>%
  mutate(next_year = if_else(any(anho_capa.1 > anho_capa & !is.na(anho_capa.1)), 
                             min(anho_capa.1[anho_capa.1 > anho_capa & !is.na(anho_capa.1)]), 
                             max(anho_capa.1)), 
         .before = cat) %>%
  ungroup() %>%
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
  mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
  filter(year_inactive >= 2017 & year_inactive <= 2018) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# single rows, they have estado = 1 = inactive with no intersecting polygons
# so no replacement
inactive_singles <- inactive_active_intersect %>% 
  group_by(put_id) %>% 
  filter(n() == 1) %>% 
  mutate(year_inactive = anho_capa) %>% 
  ungroup() |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive)

# Combine three sets for the total inactive and active
# inactive singles gives up properties that are less than current study period
true_active_inactive <- 
  bind_rows(inactive_year, inactive_singles, active) |> 
  filter(year_inactive  >= 2017) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# Filter forestry registry with true active_inactive giving us active properites 
study_properties_1718 <- forestry_registry |> 
  filter(put_id %in% true_active_inactive$put_id)

rm(subset, active, inactive_properties, inactive_active_intersect,
   inactive_year,inactive_singles, true_active_inactive)
```


# 2018 -2019

```{r}
#| include: false
#| warning: false

# Both active and inactive properties for subset of years
#anho_capa >= 2000 & <- This is not correct just yet because this will exclude 
# properties that are set estado = 0 = active which are properties that are 
#active throug the time period until 2023
subset <- property_boundary %>%
  filter(anho_capa  <= 2019) |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) 


# Divide subset into active and inactive in next two variables

# Create column for year property became inactive to be filled first by 2020 to
# indicate that is goes up to our study period. Not actually true just set for
# convenience t
#anho_capa >= 2000 & 
active <- property_boundary %>%
  filter(anho_capa  <= 2019 & estado == 0) |>
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) |> 
  mutate(year_inactive = 2020)


# From subset only properties that are inactive
inactive_properties <- subset %>%
  filter(estado  == 1)

# find the inactive properties from subset that interesect the larger dataset
inactive_active_intersect <- st_intersection(inactive_properties, property_boundary)  



# This deals with multiples from intersect, determines the year next property was
# created and uses it to determine the current  became inactive, does not return
# rows that are single without duplicate as those are inactive with no property split
# This is where to first start adjusting for study period
inactive_year <- inactive_active_intersect %>%
  group_by(put_id) %>%
  mutate(next_year = if_else(any(anho_capa.1 > anho_capa & !is.na(anho_capa.1)), 
                             min(anho_capa.1[anho_capa.1 > anho_capa & !is.na(anho_capa.1)]), 
                             max(anho_capa.1)), 
         .before = cat) %>%
  ungroup() %>%
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
  mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
  filter(year_inactive >= 2018 & year_inactive <= 2019) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# single rows, they have estado = 1 = inactive with no intersecting polygons
# so no replacement
inactive_singles <- inactive_active_intersect %>% 
  group_by(put_id) %>% 
  filter(n() == 1) %>% 
  mutate(year_inactive = anho_capa) %>% 
  ungroup() |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive)

# Combine three sets for the total inactive and active
# inactive singles gives up properties that are less than current study period
true_active_inactive <- 
  bind_rows(inactive_year, inactive_singles, active) |> 
  filter(year_inactive  >= 2018) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# Filter forestry registry with true active_inactive giving us active properites 
study_properties_1819 <- forestry_registry |> 
  filter(put_id %in% true_active_inactive$put_id)

rm(subset, active, inactive_properties, inactive_active_intersect,
   inactive_year,inactive_singles, true_active_inactive)
```


# 2019 - 2020


```{r}
#| include: false
#| warning: false

# Both active and inactive properties for subset of years
#anho_capa >= 2000 & <- This is not correct just yet because this will exclude 
# properties that are set estado = 0 = active which are properties that are 
#active throug the time period until 2023
subset <- property_boundary %>%
  filter(anho_capa  <= 2019) |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) 


# Divide subset into active and inactive in next two variables

# Create column for year property became inactive to be filled first by 2020 to
# indicate that is goes up to our study period. Not actually true just set for
# convenience t
#anho_capa >= 2000 & 
active <- property_boundary %>%
  filter(anho_capa  <= 2019 & estado == 0) |>
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist) |> 
  mutate(year_inactive = 2020)


# From subset only properties that are inactive
inactive_properties <- subset %>%
  filter(estado  == 1)

# find the inactive properties from subset that interesect the larger dataset
inactive_active_intersect <- st_intersection(inactive_properties, property_boundary)  



# This deals with multiples from intersect, determines the year next property was
# created and uses it to determine the current  became inactive, does not return
# rows that are single without duplicate as those are inactive with no property split
# This is where to first start adjusting for study period
inactive_year <- inactive_active_intersect %>%
  group_by(put_id) %>%
  mutate(next_year = if_else(any(anho_capa.1 > anho_capa & !is.na(anho_capa.1)), 
                             min(anho_capa.1[anho_capa.1 > anho_capa & !is.na(anho_capa.1)]), 
                             max(anho_capa.1)), 
         .before = cat) %>%
  ungroup() %>%
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
  mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
  filter(year_inactive >= 2019 & year_inactive <= 2020) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup()


# single rows, they have estado = 1 = inactive with no intersecting polygons
# so no replacement
inactive_singles <- inactive_active_intersect %>% 
  group_by(put_id) %>% 
  filter(n() == 1) %>% 
  mutate(year_inactive = anho_capa) %>% 
  ungroup() |> 
  select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive)

# Combine three sets for the total inactive and active
# inactive singles gives up properties that are less than current study period
true_active_inactive <- 
  bind_rows(inactive_year, inactive_singles, active) |> 
  filter(year_inactive  >= 2019) |> 
  group_by(put_id) %>% 
  slice(1) %>% 
  ungroup() 

# property_areas_1920 <- true_active_inactive |> 
#   mutate(area_msq = st_area(true_active_inactive), .before = geometry) |> 
#   drop_units()

#saveRDS(property_areas_1920, 'property_areas_1920.RDS')

# Filter forestry registry with true active_inactive giving us active properites 
study_properties_1920 <- forestry_registry |> 
  filter(put_id %in% true_active_inactive$put_id)

# rm(subset, active, inactive_properties, inactive_active_intersect,
#    inactive_year,inactive_singles, true_active_inactive, property_boundaries,
#    forestry_registry)
```



```{r}
# #| include: false

# 
# # Find all unique put_ids in the inactive_properties dataset
# unique_put_ids <- unique(inactive_properties$put_id)
# 
# # Loop over each put_id and find the intersection with the property_boundary dataset
# put_intersects <- list()
# for (i in seq_along(unique_put_ids)) {
#   put_id <- unique_put_ids[i]
#   put_subset <- inactive_properties %>% filter(put_id == !!put_id)
#   put_intersect <- st_intersection(put_subset, property_boundary)
#   put_intersects[[i]] <- put_intersect
# }
# 
# # Combine all intersection datasets into a single dataframe
# inactive_active_intersect2 <- do.call(rbind, put_intersects)
# 
# # Check if the two intersection datasets are identical
# identical(inactive_active_intersect, inactive_active_intersect2)
# 
# # Find all unique put_ids in the inactive_year dataset
# unique_put_ids <- unique(inactive_year$put_id)
# 
# # Loop over each put_id and check if it exists in inactive_active_intersect
# put_missing <- list()
# for (i in seq_along(unique_put_ids)) {
#   put_id <- unique_put_ids[i]
#   put_subset <- inactive_active_intersect %>% filter(put_id == !!put_id)
#   if (nrow(put_subset) == 0) {
#     put_missing[[i]] <- put_id
#   }
# }
# 
# # Combine all missing put_ids into a single vector
# missing_put_ids <- unlist(put_missing)
# 
# # Check if any put_ids are missing from inactive_active_intersect
# if (length(missing_put_ids) > 0) {
#   message("The following put_ids are missing from inactive_active_intersect: ", paste(missing_put_ids, collapse = ", "))
# }

```

```{r}

#small test to undestand structure
# put_1973 <- inactive_active_intersect |>
#   filter(put_id == 'PUT1973') |>
#   select(put_id, anho_capa, put_id.1, anho_capa.1  ) |>
#   st_drop_geometry()

# This deals with multiples from intersect, determines the year next property was
# created and uses it to determine the current  became inactive, does not return
# rows that are single without duplicate as those are inactive with no property split
# This is where to first start adjusting for study period
# inactive_year <- inactive_active_intersect %>%
#   group_by(put_id) %>%
#   mutate(next_year = if_else(any(anho_capa.1 > anho_capa), 
#                              min(anho_capa.1[anho_capa.1 > anho_capa]), 
#                              max(anho_capa.1)), 
#          .before = cat) %>%
#   ungroup() %>%
#   select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
#   mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
#   filter(year_inactive >= 2011 & year_inactive <= 2013)


# inactive_year <- inactive_active_intersect %>%
#   group_by(put_id) %>%
#   filter(!duplicated(put_id)) %>%
#   mutate(next_year = if_else(anho_capa.1 > anho_capa, anho_capa.1, NA_real_), .before = cat) %>%
#   slice_min(next_year) %>%
#   ungroup() %>%
#   select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
#   mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
#   filter(year_inactive >= 2011 & year_inactive <= 2013)


#   group_by(put_id) %>% 
#   mutate(next_year = if_else(anho_capa.1 > anho_capa, anho_capa.1, NA_real_)) %>% 
#   slice_min(next_year) %>% 
#   ungroup() %>% 
#   filter(!is.na(next_year)) %>% 
#   arrange(next_year) %>% 
#   mutate(row_num = row_number()) %>% 
#   filter(row_num == 1) %>% 
#   select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>% 
#   mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) %>% 
#   filter(year_inactive >= 2011 & year_inactive <= 2013)

# inactive_year <- inactive_active_intersect %>%
#   group_by(put_id) %>%
#   mutate(rank = rank(-anho_capa.1), 
#          next_year = if_else(rank == 2, min(anho_capa.1), NA_real_), .before = cat) %>%
#   ungroup() %>%
#   filter(!duplicated(put_id)) %>%
#   select(id, put_id, anho_capa, estado, cod_dpto, cod_dist, year_inactive = next_year) %>%
#   mutate(year_inactive = if_else(is.na(year_inactive), anho_capa, year_inactive)) |>
#   filter(year_inactive >= 2011 & year_inactive <= 2013)


# put_1973_2 <- inactive_year |>
#   filter(put_id == 'PUT1973') |>
#   select(put_id, anho_capa, year_inactive) |>
#   st_drop_geometry()

```
 
 
```{r}

#small test to undestand structure
# put_0003 <- inactive_active_intersect |> 
#   filter(put_id == 'PUT0003') |> 
#   select(put_id, anho_capa, put_id.1, anho_capa.1  ) |> 
#   st_drop_geometry()
```

 