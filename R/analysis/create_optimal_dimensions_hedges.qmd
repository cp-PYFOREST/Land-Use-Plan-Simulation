```{r}
library(sf)
library(tidyverse)
library(here)
library(units)
library(knitr)
library(tictoc)
library(flextable)
library(parallel)
library(purrr)
library(foreach)
library(doParallel)
library(furrr)
library(beepr)
library(gt)
```



```{r}
#source(knitr::purl(here("src", "boundary_registry_data.qmd")))
source(knitr::purl(here('src', "lup_simulator_hedges.qmd")))

```


```{r}
limit_lu <- st_read('/Users/romero61/../../capstone/pyforest/data/mock_properties/mock_properties.shp')

#to read in rework if not loaded
# limit_lu <- st_read("/Users/romero61/../../capstone/pyforest/data/rework/rwk_over28.gpkg")

hydro <- st_read('/Users/romero61/../../capstone/pyforest/data/river_buffer/river_buffer.gpkg')

```

# Parallel Functions

```{r}
# create a vector of unique combinations of width_paddock # Function to create unique combinations of width_paddock and height_paddock
create_paddock_dims <- function() {
  expand_grid(width_paddock = 1:4, height_paddock = 1:4) %>%
    subset(width_paddock != height_paddock | width_paddock == 1)
}
```


```{r}
generate_statistics <-
  function(property_boundary,
       width_paddock,
       height_paddock,
       fr_area,
       fr_per,
       paddocks,
       hedgerow_area,
       hedgerow_per,
       riparian_area,
       riparian_area_per) {
     # print("Inside generate_statistics")
    # 
    # print("Checking property_boundary")
    # print(property_boundary)
    # print("Checking forest_reserve")
    # print(forest_reserve)
    # print("Checking paddocks")
    # print(paddocks)
    # print("Checking final_hedgerow")
    # print(final_hedgerow)
    # print('Checking property')
    # print(property_boundary$cat)
    # print("Checking riparians")
    # print(riparian_area)
    # print(riparian_area_per)

    statistics <- tibble(
      cat = property_boundary$cat,
      ratio_xy = paste(width_paddock, "/", height_paddock),
      property_area = st_area(property_boundary) |> drop_units(),
      property_units = "m^2",
      
      fr_area = fr_area,
      fr_units = "m^2",
      fr_per = fr_per,
      
      paddocks_area = round(sum(st_area(paddocks)),2) |> drop_units(),
      paddocks_units = "m^2",
      paddocks_per = round(sum((st_area(paddocks)))/ st_area(property_boundary) * 100 ,2) 
|>  drop_units(),
      
      hedgerow_area = hedgerow_area,
      hedgerow_per =  hedgerow_per,
      
      riparian_area = riparian_area ,
      riparian_units = 'm^2',
      riparian_per = riparian_area_per
    )
  #   log_message <- paste("stats:", nrow(statistics), "\n")
  # cat(log_message, file = "log.txt", append = TRUE)
    return(statistics)
  }
```





```{r}
#| include: false

# Function to process a single property and paddock dimension
process_property <- function(property_id, width_paddock, height_paddock) {
   #print("Starting process_property function") # Add this line
  # Your code for processing a single property and paddock dimension
  # Here you should use the provided property_id, width_paddock, and height_paddock
  # instead of the values from the loops.
  # 
  # print(paste(
  #   'id',
  #   property_id,
  #   'width_paddock',
  #   width_paddock,
  #   "Height",
  #   height_paddock
  # ))
  
  results_df <- data.frame()
    tryCatch({
      #print("Inside tryCatch block")


  property_id <- as.integer(property_id)
  # Select Property
  #print("Selecting property")
  property_boundary <- select_property(property_id)
  
  # Riparian Corridor check
  #print("Checking riparian corridor")
  riparian_corridor <- riparian_buffer(boundary_property = property_boundary,
           hydrology = hydro)
  

  # Property dimensions
 #print("Calculating property dimensions")
  pad_hedg_dim <- property_dimensions(
    desired_area = 999999,
    hedgerow_width = 100,
    width_paddock = width_paddock,
    height_paddock = height_paddock)
  
  # Create Grid , Rotate, Cut With Property
 #print("Creating grid, rotating, and cutting with property")
  property_grid <- grid_rotate(property_boundary, pad_hedg_dim)
  
  # Cut Grid w/ River
  #print("Cutting grid with river")
  property_fragment <- riparian_cut(riparian_corridor, property_grid)
  
  
    # Hedgerows
  #print("Dividing area into paddocks and hedgerows")
  hedgerows <- make_hedges(fragment = property_fragment,
                        boundary_property = property_boundary,
                        corridor = riparian_corridor)
  
  paddocks <- st_difference(property_fragment, hedgerows)
  
  
  if (is.null(riparian_corridor) == FALSE) {
    riparian_area <- sum(round(st_area(riparian_corridor), 2))
    riparian_area_per <-
      sum((st_area(riparian_corridor)) / st_area(property_boundary)) * 100
    
    hedge <- st_erase(hedgerows, property_boundary)
    hedges <- st_difference(hedgerows, hedge)
    final_hedgerow <-
      st_difference(hedges, riparian_corridor) |> st_sf() |>
      st_collection_extract(type = 'POLYGON')
    
  } else{
    riparian_area <- NA
    riparian_area_per <- NA
    hedge <- st_erase(hedgerows, property_boundary)
    hedges <- st_difference(hedgerows, hedge)
    final_hedgerow <- hedges
  }
  
  # Area Check for 25% minimun
  hedgerow_area <- sum((st_area(final_hedgerow)))
  hedgerow_per <- (hedgerow_area / st_area(property_boundary)) * 100
  
  if (hedgerow_per <= set_units(25, 1)) {
    forest_reserve <- reserve(grid = paddocks ,
                              hedge_per = hedgerow_per,
                              boundary_property = property_boundary)
    fr_area <- sum(st_area(forest_reserve))
    fr_per <- (fr_area / sum(st_area(property_boundary))) * 100
    
    paddocks <- st_erase(paddocks, forest_reserve)
    
  } else{
    forest_reserve <-  NA
    fr_area <- NA
    fr_per <- NA
  }
  

  
  
# print("Calculating final statistics")
#    log_message <- paste("Processing property_id:", property_id, "width_paddock:", width_paddock, "height_paddock:", height_paddock, "\n")
# cat(log_message, file = "log.txt", append = TRUE)
# print(log_message)

  
  # Final Areas
   statistics <-
     generate_statistics(
       property_boundary,
       width_paddock,
       height_paddock,
       fr_area,
       fr_per,
       paddocks,
       hedgerow_area,
       hedgerow_per,
       riparian_area,
       riparian_area_per
     )
   # print('Check return of statistics')
   # print(paste("Number of rows in statistics:", nrow(statistics)))

  results_df <- bind_rows(results_df,statistics)

  #print("Done with process_property function")
  },
  
   error = function(e) {
     error_tibble <- tibble(
       cat = paste(property_id,width_paddock, height_paddock),
       error = as.character(e)
     )
   results_df <- bind_rows(results_df, error_tibble)
   })
  #print("After tryCatch block")
  #print(paste("Returning result for property_id:", property_id, ", width_paddock:", width_paddock, ", height_paddock:", height_paddock))
  #print(paste("Number of rows in statistics:", nrow(results_df$statistics)))
  # print(paste("Number of rows in results_df:", nrow(results_df)))
  

  return(results_df)
  }
  

```



# Function for furrr

```{r}
process_property_nested <- function(property_id, width_paddock, height_paddock) {
  result <- process_property(property_id, width_paddock, height_paddock)
  return(result)
}



```


 

# furrr
```{r}
#| include: false
#| warning: false
tic()
# Make sure to register the number of cores you want to use for parallel processing
plan(multisession, workers = 19)

# Create a list of property ids
property_ids <- unique(limit_lu$cat)

# Create paddock dimensions
paddock_dims <- create_paddock_dims()

# Run the process_property function for each property id and paddock dimension
results <- future_map_dfr(property_ids, function(property_id) {
  future_pmap_dfr(list(
    width_paddock = paddock_dims$width_paddock,
    height_paddock = paddock_dims$height_paddock
  ), function(width_paddock, height_paddock) {
    process_property_nested(property_id, width_paddock, height_paddock)
  })
})

# Combine the results
results_df <- bind_rows(results)
toc()
```




# Saving results to data folder
```{r}
#
# results_df5608 25%
# result_df5608_increase 50%
#saveRDS(results, '~/../../capstone/pyforest/data/results_5608/results5608.rds')
#saveRDS(results, '~/../../capstone/pyforest/data/results_5608/results5608_increase.rds')
#saveRDS(results, '~/../../capstone/pyforest/data/results_5608/results5608_hedges.rds')


```

# Reload data 
```{r}
# load in results as running script again will overwrite results variable
results5608 <- readRDS("/Users/romero61/../../capstone/pyforest/data/results_5608/results5608_hedges.rds")

```

# OPTIMAL DIMENSIONS AND PADDOCKS

```{r}
# Arrange the data by property_id, highest paddocks_area, and fr_area, and separate ratio_xy into width_paddock and height_paddock.
# Resulting dataset is optimal ratios 
optimal <- results5608 %>%
  group_by(cat) %>%
  arrange(cat, desc(paddocks_area), desc(hedgerow_per)) %>%
  slice(1) %>%
  ungroup() %>%
  separate(ratio_xy, into = c("width_paddock", "height_paddock"), sep = "/", convert = TRUE, remove = FALSE) |>
  drop_units() |> #5608 properties
  mutate(paddock_size = 999999)
```


```{r}
# No reworked datasets, reducing paddock area creates more paddocks meaning
# more hedgerow area and percentage. 
# This leaves 120 properties with over 28% 
# Out of those 120, four have more hedgerow percentage than paddock percentage,
# possibly due to river and position on edge of country need to verify.
# Possibly we convert these properties completely to forest reserve.
# 
# The Remaining 116 properties have more paddock percentage by ~5 to ~20 percent.
# I would consider leaving these as is since these properties do not require any
# extra forest reserve to reach minimun 25% still achieves economic development 
# goal. 


# PERCENTAGES

percentages <- optimal |>
  select(-riparian_area, -property_area, -property_units, -fr_area, -paddocks_area, -paddocks_units, - hedgerow_area, -fr_units) |>
  drop_units() |> 
  replace_na(replace = list(riparian_per = 0, fr_per = 0)) |> 
  mutate(sum_percentage = fr_per + paddocks_per + hedgerow_per + riparian_per)
#saveRDS(statistics, "/Users/romero61/../../capstone/pyforest/data/results_df/statistics.rds")
theme_apa(flextable(percentages))



```

```{r}
# Finally, save the optimal xy for each property to create a lup with 25% forest reserve
# 
#saveRDS(optimal, '/Users/romero61/../../capstone/pyforest/data/results_5608/optimal_xy_hedges.rds')

# dataset to create map
# 
optimal_mock_properties <- limit_lu |> 
  left_join(optimal %>%
              select(cat, width_paddock, height_paddock, paddock_size),
            by = "cat")
#save 
#
#st_write(optimal_mock_properties, '/Users/romero61/../../capstone/pyforest/data/optimal_mock_properties/optimal_mock_properties_hedges.gpkg')
```


```{r}

```


