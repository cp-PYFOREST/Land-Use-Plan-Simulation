---
editor: 
  markdown: 
    wrap: 72
---

```{r}
library(sf)
library(tmap)
library(tidyverse)
library(here)
library(knitr)
library(mapview)
library(units)
```

```{r}

source(knitr::purl(here('src', "lup_simulator.qmd")))

```




```{r}
study_boundary <- st_read('/capstone/pyforest/data/study_boundary/study_boundary.shp')

developed_region <- st_read('/capstone/pyforest/data/developed_region/developed_region.gpkg')

dimensions <- property_dimensions(desired_area = 40000000,
                                  hedgerow_width = 0,
                                  width_paddock = 1,
                                  height_paddock = 1) 

study_gridded <- grid_rotate(boundary_property = study_boundary, x_y = dimensions) |> st_as_sf()



tmap_mode('view')
tm_shape(study_gridded) +
   tm_borders(col = 'red') +
  tm_shape(developed_region) +
   tm_sf(col = 'black') 

```

```{r}
cell_undeveloped <- st_difference(study_gridded, developed_region)

tm_shape(cell_undeveloped) +
   tm_sf(col = 'red')
```

```{r}
study_undeveloped <- st_difference(study_boundary, developed_region)
tm_shape(study_undeveloped) +
   tm_sf(col = 'red')

study_gridded2 <- grid_rotate(boundary_property = study_undeveloped, x_y = dimensions) |> st_as_sf()
tm_shape(cell_undeveloped) +
   tm_sf(col = 'blue')+
  tm_shape(study_gridded2) +
   tm_sf(col = 'forestgreen')

```

```{r}
grd_no_rotation <- sf::st_make_grid(study_undeveloped,
                       cellsize = c(dimensions[[1]], dimensions[[2]]),
                       n = 150) |> st_as_sf()

grd_no_rotation_study <- st_intersection(grd_no_rotation,study_boundary)

no_rotation_undeveloped <- st_difference(grd_no_rotation_study, developed_region) 

tm_shape(no_rotation_undeveloped) +
   tm_sf(col = 'forestgreen')

```


```{r}

undeveloped1 <- no_rotation_undeveloped |> 
  mutate(cat = seq(1:nrow(no_rotation_undeveloped)), 
         area = st_area(no_rotation_undeveloped), .before = x) |>
  drop_units() |>
  filter(area >= 2000000  ) |>
  rename(geometry = x) |> 
  select(cat, area)

# undeveloped2 <- study_gridded2 |> 
#   mutate(cat = seq(1:nrow(study_gridded2)), 
#          area = st_area(study_gridded2), .before = x) |>
#   drop_units() |>
#   filter(area >= 2000000  ) |>
#   rename(geometry = x) |> 
#   select(cat, area)
# 
# 
# undeveloped3 <- cell_undeveloped |> 
#   mutate(cat = seq(1:nrow(cell_undeveloped)), 
#          area = st_area(cell_undeveloped), .before = x) |>
#   drop_units() |>
#   filter(area >= 2000000) |>
#   rename(geometry = x) |> 
#   select(cat, area)

#st_write(no_rotation_undeveloped, '/capstone/pyforest/data/undeveloped_region/undeveloped_region_complete.shp')
```

```{r}
st_area(study_undeveloped)
sum(undeveloped1$area)
sum(undeveloped2$area)
sum(undeveloped3$area)

```


```{r}
tm_shape(study_undeveloped) +
   tm_sf(col = 'red')+
tm_shape(undeveloped3) +
   tm_sf(col = 'black')+
  tm_shape(undeveloped2) +
   tm_sf(col = 'black') +
  tm_shape(undeveloped1) +
   tm_sf(col = 'black')

```

```{r}
#fix for broken portions of larger property
# Assuming your dataframes are named average_properties and average_properties2
# 
# # Find the touching polygons
# touching_polygons <- st_touches(average_properties, average_properties2)
# 
# # Get the indices of the touching polygons in average_properties
# touching_indices <- which(lengths(touching_polygons) > 0)
# 
# # Subset the touching polygons in average_properties
# small_corners <- average_properties[touching_indices, ]
# 
# # Subset polygons being touched by small corners
# poly_corners <- average_properties2[touching_indices,]
# # Create a union with the larger polygons in average_properties2
# mock_union <- st_union(small_corners,average_properties2, by_feature = TRUE)
# 
# 
# #st_write(small_corners, '/capstone/pyforest/data/mock_properties/small_corners.shp')
#  #tm_shape(average_properties) +
#  #  tm_sf()
```

```{r}
#tmap_options(check.and.fix = FALSE)
# 
# snaps <- st_snap(average_properties,average_properties2,tolerance = 700) |> st_make_valid()
# 
# tm_shape(average_properties) +
#   tm_polygons(col = 'black')+
#   tm_shape(average_properties2) +
#   tm_polygons(col = 'dodgerblue')+
#     tm_shape(snaps) +
#   tm_polygons(col = 'red')
# ```

```{r}
# tm_shape(average_properties) +
#   tm_polygons(col = 'red')+
#   tm_shape(average_properties2) +
#   tm_polygons(col = 'dodgerblue')+
#     tm_shape(poly_corners) +
#   tm_polygons(col = 'forestgreen')
```
